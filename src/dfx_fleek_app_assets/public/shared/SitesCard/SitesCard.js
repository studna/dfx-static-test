import React from 'react';
import PropTypes from 'prop-types';
import Box from '@terminal-packages/ui/core/Box';
import IconFA from '@terminal-packages/ui/core/IconFA';
import Typography from '@material-ui/core/Typography';
import { useTranslation } from 'react-i18next';
import Skeleton from '@material-ui/lab/Skeleton';
import classnames from 'classnames';

import { url, getGatewayUrl } from '@Shared/utils';

import useStyles from './styles';
import presenter from './presenter';
import { DOMAIN_TYPE, DEPLOY_STATUS, GA_EVENTS_CATEGORIES } from '~/constants';

const SitesCard = ({ siteBySlug }) => {
  const { t } = useTranslation();
  const siteCard = presenter.getSiteCard({ t, siteBySlug });

  const classes = useStyles(siteCard);

  const getContent = () => {
    if (siteBySlug.loading) {
      return (
        <>
          <div className={classes.siteInfo}>
            <div className={classes.header}>
              <Skeleton
                width={224}
                height={29}
                variant="rect"
                animation="wave"
                classes={{
                  root: classes.skeletonRoot,
                }}
              />
              <Skeleton
                width={224}
                height={22}
                variant="rect"
                animation="wave"
                className={classes.published}
                classes={{
                  root: classes.skeletonRoot,
                }}
              />
            </div>
            <Skeleton
              width={138}
              height={22}
              variant="rect"
              animation="wave"
              classes={{
                root: classes.skeletonRoot,
              }}
            />
            <Skeleton
              width={279}
              height={22}
              variant="rect"
              animation="wave"
              classes={{
                root: classes.skeletonRoot,
              }}
            />
            <Skeleton
              width={459}
              height={22}
              variant="rect"
              animation="wave"
              classes={{
                root: classes.skeletonRoot,
              }}
            />
          </div>
          <Skeleton
            width={234}
            height={132}
            variant="rect"
            animation="wave"
            classes={{
              root: classes.skeletonRoot,
            }}
          />
        </>
      );
    }

    const getDomainOrStatus = () => {
      if (siteCard.status === DEPLOY_STATUS.DEPLOYED && siteCard.defaultDomain !== '') {
        return (
          <a
            href={`https://${siteCard.defaultDomain}`}
            target="_blank"
            rel="noopener noreferrer"
            className={classnames(classes.linkStyleReset, classes.coloredHover)}
            onClick={() => {
              let domainKey;
              let eventDescription;

              if (siteCard.defaultDomaintype === DOMAIN_TYPE.DEFAULT_SUBDOMAIN) {
                domainKey = 'autogeneratedDomain';
                eventDescription = 'Autogenerated subdomain click';
              } else {
                domainKey = 'domain';
                eventDescription = 'Propagated custom domain click';
              }

              window.ga('send', 'event', GA_EVENTS_CATEGORIES.SITES, eventDescription, `https://${siteCard.defaultDomain}`);
              window.analytics.track(eventDescription, {
                siteId: siteCard.siteId,
                teamId: url.getAccountIdFromUrl(),
                [domainKey]: siteCard.defaultDomain,
              });
            }}
          >
            <Typography variant="body2" className={classes.domain}>
              {siteCard.defaultDomain}
            </Typography>
          </a>
        );
      }

      return (
        <Typography variant="body2" className={classes.domain}>
          {t(`sites.siteHeader.deploy.${siteCard.status}`, siteCard.defaultDomain)}
        </Typography>
      );
    };

    const getIpfs = () => {
      if (!siteCard.ipfsHash) {
        return (
          <Typography
            variant="body2"
            className={classes.ipfsPending}
          >
            {t('sites.siteHeader.ipfs.pending')}
          </Typography>
        );
      }
      return (
        <a
          href={getGatewayUrl(siteCard.ipfsHash)}
          target="_blank"
          rel="noopener noreferrer"
          className={classes.ipfs}
        >
          <Typography variant="body2">
            {t('sites.siteHeader.ipfs.verify')}
          </Typography>
        </a>
      );
    };

    return (
      (
        <>
          <div className={classes.siteInfo}>
            <div className={classes.header}>
              <Typography variant="h6" color="textPrimary">
                {siteCard.title}
              </Typography>
              <Typography variant="body2" className={classes.published}>
                {siteCard.subtitle}
              </Typography>
            </div>
            {getDomainOrStatus()}
            <div className={classes.repoContainer}>
              <IconFA
                icon={['fab', 'github']}
                className={classes.repoIcon}
              />
              <a
                href={siteCard.repositoryUrl}
                target="_blank"
                rel="noopener noreferrer"
                className={classes.repo}
              >
                <Typography variant="body2">
                  {siteCard.repository}
                </Typography>
              </a>
            </div>
            <div className={classes.ipfsContainer}>
              <img
                src="https://storage.googleapis.com/terminal-assets/images/wallets/ipfs.svg"
                className={classes.ipfsIcon}
                alt="Ipfs logo"
              />
              {getIpfs()}
            </div>
          </div>
          <div className={classes.preview}>
            <IconFA icon={['fal', 'image']} />
          </div>
        </>
      )
    );
  };

  return (
    <Box>
      <div className={classes.siteContent}>
        {getContent()}
      </div>
    </Box>
  );
};

SitesCard.defaultProps = {
  siteBySlug: {
    data: null,
    error: null,
    loading: false,
  },
};

SitesCard.propTypes = {
  siteBySlug: PropTypes.shape({
    data: PropTypes.object,
    error: PropTypes.object,
    loading: PropTypes.bool,
  }),
};

export default SitesCard;
